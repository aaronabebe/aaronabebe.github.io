---
export interface Props extends astroHTML.JSX.AnchorHTMLAttributes {}

const { href, text, class: className, ...props } = Astro.props;
const isActive = href === Astro.url.pathname;
---

<a href={href} class:list={[className, { active: isActive }]} {...props}>
	<span>
		<slot />
	</span>
	<div class="marquee" aria-hidden="true">
		<div class="marquee__inner">
			<span>{text}</span>
			<span>{text}</span>
			<span>{text}</span>
			<span>{text}</span>
			<span>{text}</span>
			<span>{text}</span>
			<span>{text}</span>
			<span>{text}</span>
		</div>
	</div>
</a>
<style lang="scss">
	@import '../styles/animations';
	@import '../styles/colors';

	.marquee {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		overflow: hidden;
		pointer-events: none;
	}

	.marquee__inner {
		width: fit-content;
		display: flex;
		position: relative;
		--offset: 1rem;
		--move-initial: calc(-25% + var(--offset));
		--move-final: calc(-50% + var(--offset));
		transform: translate3d(var(--move-initial), 0, 0);
		animation: marquee 2s linear infinite;
		animation-play-state: paused;
		opacity: 0;
	}

	.marquee span {
		text-align: center;
		white-space: nowrap;
		font-style: italic;
		padding: 1.5rem 0.5rem;
	}

	a {
		box-sizing: content-box;
		width: 100%;
		display: inline-block;
		pointer-events: auto;
		cursor: pointer;
		background: $primary;
		border: none;
		margin: 0;
		font-family: inherit;
		font-size: inherit;
		position: relative;
		border-right: 1px solid $font-main;
		border-bottom: 1px solid $font-main;
		overflow: hidden;
		color: white;
	}

	a.active {
		// background-color: $secondary;
		background-image: $primGradient;
		color: $primary;
		font-weight: 200;
	}

	a span {
		display: inline-block;
		transition: opacity 0.1s;
	}

	a:hover > span {
		opacity: 0;
	}

	a .marquee {
		transform: rotate(-2.75deg);
	}

	a:hover .marquee__inner {
		animation-play-state: running;
		opacity: 1;
		transition-duration: 0.6s;
	}
</style>
